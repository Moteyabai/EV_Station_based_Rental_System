// SCRIPT DEBUG BOOKING SYSTEM
// Copy v√† paste v√†o Console (F12) c·ªßa tr√¨nh duy·ªát

console.log('üöÄ ===== BOOKING SYSTEM DEBUG TOOL =====\n');

// 1. Ki·ªÉm tra LocalStorage
const BOOKINGS_KEY = 'ev_rental_bookings';
const bookings = JSON.parse(localStorage.getItem(BOOKINGS_KEY)) || [];

console.log('üì¶ T·ªïng s·ªë bookings:', bookings.length);
console.log('üìã T·∫•t c·∫£ bookings:', bookings);

if (bookings.length > 0) {
    // Ph√¢n lo·∫°i theo status
    const byStatus = {
        pending_payment: bookings.filter(b => b.status === 'pending_payment').length,
        booked: bookings.filter(b => b.status === 'booked').length,
        renting: bookings.filter(b => b.status === 'renting').length,
        completed: bookings.filter(b => b.status === 'completed').length,
        cancelled: bookings.filter(b => b.status === 'cancelled').length
    };
    
    console.log('\nüìä Ph√¢n lo·∫°i theo Status:');
    console.table(byStatus);
    
    // Ki·ªÉm tra booking m·ªõi nh·∫•t
    const latest = bookings[bookings.length - 1];
    console.log('\n‚ú® Booking m·ªõi nh·∫•t:');
    console.log('ID:', latest.id);
    console.log('Customer:', latest.userName);
    console.log('Vehicle:', latest.vehicleName);
    console.log('Status:', latest.status);
    console.log('Payment Method:', latest.paymentMethod);
    console.log('Total Price:', latest.totalPrice);
    console.log('Created At:', latest.createdAt);
    console.log('Payment Verified:', latest.paymentVerified);
    
    // Ki·ªÉm tra c·∫•u tr√∫c
    const requiredFields = [
        'id', 'userId', 'userName', 'userEmail', 'userPhone',
        'vehicleName', 'licensePlate', 'pickupDate', 'returnDate',
        'pickupStation', 'returnStation', 'totalPrice', 'paymentMethod',
        'status', 'createdAt', 'paymentVerified'
    ];
    
    const missingFields = requiredFields.filter(field => !latest.hasOwnProperty(field));
    
    if (missingFields.length > 0) {
        console.warn('\n‚ö†Ô∏è Booking thi·∫øu c√°c fields:', missingFields);
    } else {
        console.log('\n‚úÖ C·∫•u tr√∫c booking h·ª£p l·ªá!');
    }
    
} else {
    console.warn('‚ö†Ô∏è Kh√¥ng c√≥ booking n√†o trong localStorage!');
    console.log('\nüí° ƒê·ªÉ t·∫°o test booking, ch·∫°y:');
    console.log('%ccreatestBooking()', 'color: #4db6ac; font-weight: bold;');
}

// 2. Ki·ªÉm tra User ƒë√£ ƒëƒÉng nh·∫≠p
console.log('\nüë§ ===== USER INFO =====');
const userStr = localStorage.getItem('user');
if (userStr) {
    const user = JSON.parse(userStr);
    console.log('User:', user);
    console.log('Role:', user.roleID === 2 ? 'üë®‚Äçüíº Staff' : 'üë§ Customer');
    console.log('Email:', user.email);
    console.log('Name:', user.fullName || user.name);
} else {
    console.warn('‚ö†Ô∏è Ch∆∞a c√≥ user ƒëƒÉng nh·∫≠p!');
}

// 3. Function helper
console.log('\nüõ†Ô∏è ===== HELPER FUNCTIONS =====');

window.createTestBooking = () => {
    const bookings = JSON.parse(localStorage.getItem(BOOKINGS_KEY)) || [];
    const testBooking = {
        id: `BK${Date.now()}-1`,
        userId: "customer@test.com",
        userEmail: "customer@test.com",
        userName: "Nguy·ªÖn VƒÉn Test",
        userPhone: "0987654321",
        vehicleName: "VinFast VF e34",
        vehicleId: "1",
        licensePlate: `59A-${Math.floor(10000 + Math.random() * 90000)}`,
        vehicleImage: "/images/vinfast-vf-e34.jpg",
        pickupDate: "2025-10-20",
        returnDate: "2025-10-25",
        pickupTime: "09:00",
        returnTime: "18:00",
        pickupStation: "Tr·∫°m Qu·∫≠n 1, TPHCM",
        returnStation: "Tr·∫°m Qu·∫≠n 1, TPHCM",
        days: 5,
        totalPrice: 5000000,
        additionalServices: {},
        paymentMethod: "cash",
        battery: "100%",
        lastCheck: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        status: "pending_payment",
        paymentVerified: false,
        paymentVerifiedAt: null,
        paymentVerifiedBy: null
    };
    
    bookings.push(testBooking);
    localStorage.setItem(BOOKINGS_KEY, JSON.stringify(bookings));
    console.log('‚úÖ ƒê√£ t·∫°o test booking:', testBooking);
    console.log('üí° Reload trang Staff ƒë·ªÉ th·∫•y booking m·ªõi!');
    return testBooking;
};

window.clearBookings = () => {
    localStorage.removeItem(BOOKINGS_KEY);
    console.log('üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ bookings!');
};

window.viewBookings = () => {
    const bookings = JSON.parse(localStorage.getItem(BOOKINGS_KEY)) || [];
    console.table(bookings.map(b => ({
        ID: b.id,
        Customer: b.userName,
        Vehicle: b.vehicleName,
        Status: b.status,
        Method: b.paymentMethod,
        Price: b.totalPrice,
        Verified: b.paymentVerified ? '‚úÖ' : '‚ùå'
    })));
};

window.testStaffView = () => {
    const bookings = JSON.parse(localStorage.getItem(BOOKINGS_KEY)) || [];
    console.log('\nüì± ===== STAFF VIEW SIMULATION =====');
    
    // Payment Management tab
    const paymentTab = bookings.map(b => ({
        id: b.id,
        customer: b.userName,
        vehicle: b.vehicleName,
        amount: b.totalPrice,
        status: b.status === 'pending_payment' ? 'pending' : 
                b.status === 'cancelled' ? 'cancelled' : 'verified',
        method: b.paymentMethod
    }));
    
    console.log('\nüí∞ Payment Management Tab:');
    console.table(paymentTab);
    
    // Vehicle Handover tab
    const handoverTab = bookings
        .filter(b => b.status !== 'pending_payment' && b.status !== 'cancelled')
        .map(b => ({
            id: b.id,
            customer: b.userName,
            vehicle: b.vehicleName,
            status: b.status,
            verified: b.paymentVerified ? '‚úÖ' : '‚ùå'
        }));
    
    console.log('\nüöó Vehicle Handover Tab:');
    if (handoverTab.length > 0) {
        console.table(handoverTab);
    } else {
        console.log('‚ùå Kh√¥ng c√≥ booking n√†o (c·∫ßn x√°c nh·∫≠n thanh to√°n tr∆∞·ªõc)');
    }
};

console.log('\nüìö Available Commands:');
console.log('%ccreateTestBooking()', 'color: #10b981; font-weight: bold;', '- T·∫°o test booking');
console.log('%cclearBookings()', 'color: #ef4444; font-weight: bold;', '- X√≥a t·∫•t c·∫£ bookings');
console.log('%cviewBookings()', 'color: #3b82f6; font-weight: bold;', '- Xem b·∫£ng bookings');
console.log('%ctestStaffView()', 'color: #8b5cf6; font-weight: bold;', '- Test Staff view');

console.log('\n‚úÖ Debug tool loaded! S·ª≠ d·ª•ng c√°c functions ·ªü tr√™n ƒë·ªÉ test.\n');
