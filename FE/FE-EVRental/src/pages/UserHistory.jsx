import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Link } from 'react-router-dom';
import '../styles/UserHistory.css';

// Mock d·ªØ li·ªáu l·ªãch s·ª≠ thu√™ xe
const mockRentalHistory = [
  {
    id: 'BK100001',
    vehicleName: 'Tesla Model 3',
    vehicleType: 'Sedan',
    stationName: 'Tr·∫°m EV C√¥ng vi√™n Trung t√¢m',
    pickupDate: '2025-08-15',
    pickupTime: '10:00',
    returnDate: '2025-08-17',
    returnTime: '18:00',
    status: 'completed',
    totalAmount: 225,
    distanceTraveled: 320,
    avgBatteryUsage: 28
  },
  {
    id: 'BK100002',
    vehicleName: 'Nissan Leaf',
    vehicleType: 'Hatchback',
    stationName: 'Trung t√¢m EV Th√†nh ph·ªë',
    pickupDate: '2025-09-05',
    pickupTime: '09:30',
    returnDate: '2025-09-06',
    returnTime: '17:00',
    status: 'completed',
    totalAmount: 125,
    distanceTraveled: 180,
    avgBatteryUsage: 32
  },
  {
    id: 'BK100003',
    vehicleName: 'Chevrolet Bolt',
    vehicleType: 'Hatchback',
    stationName: 'Trung t√¢m EV Riverside',
    pickupDate: '2025-09-22',
    pickupTime: '14:00',
    returnDate: '2025-09-24',
    returnTime: '12:00',
    status: 'active',
    totalAmount: 150,
    distanceTraveled: null,
    avgBatteryUsage: null
  }
];

export default function UserHistory() {
  const { user } = useAuth();
  const [rentalHistory, setRentalHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');
  const [sort, setSort] = useState('date-desc');
  
  // Analytics data
  const [analytics, setAnalytics] = useState({
    totalRentals: 0,
    totalSpent: 0,
    totalDistance: 0,
    avgBatteryUsage: 0,
    favoriteVehicle: '',
    favoriteStation: ''
  });
  
  useEffect(() => {
    // Trong ·ª©ng d·ª•ng th·ª±c, l·∫•y l·ªãch s·ª≠ thu√™ xe t·ª´ API
    setTimeout(() => {
      setRentalHistory(mockRentalHistory);
      
      // T√≠nh to√°n ph√¢n t√≠ch
      const completed = mockRentalHistory.filter(rental => rental.status === 'completed');
      
      if (completed.length > 0) {
        const totalDistance = completed.reduce((sum, rental) => sum + rental.distanceTraveled, 0);
        const totalSpent = completed.reduce((sum, rental) => sum + rental.totalAmount, 0);
        const avgBatteryUsage = completed.reduce((sum, rental) => sum + rental.avgBatteryUsage, 0) / completed.length;
        
        // T√¨m xe v√† tr·∫°m y√™u th√≠ch
        const vehicleCounts = {};
        const stationCounts = {};
        
        completed.forEach(rental => {
          vehicleCounts[rental.vehicleName] = (vehicleCounts[rental.vehicleName] || 0) + 1;
          stationCounts[rental.stationName] = (stationCounts[rental.stationName] || 0) + 1;
        });
        
        const favoriteVehicle = Object.keys(vehicleCounts).reduce((a, b) => 
          vehicleCounts[a] > vehicleCounts[b] ? a : b, Object.keys(vehicleCounts)[0]);
          
        const favoriteStation = Object.keys(stationCounts).reduce((a, b) => 
          stationCounts[a] > stationCounts[b] ? a : b, Object.keys(stationCounts)[0]);
        
        setAnalytics({
          totalRentals: completed.length,
          totalSpent: totalSpent,
          totalDistance: totalDistance,
          avgBatteryUsage: avgBatteryUsage,
          favoriteVehicle: favoriteVehicle,
          favoriteStation: favoriteStation
        });
      }
      
      setLoading(false);
    }, 1000);
  }, []);
  
  // L·ªçc l·ªãch s·ª≠ thu√™ theo b·ªô l·ªçc ƒë√£ ch·ªçn
  const filteredRentals = rentalHistory.filter(rental => {
    if (filter === 'all') return true;
    return rental.status === filter;
  });
  
  // S·∫Øp x·∫øp l·ªãch s·ª≠ thu√™ theo ti√™u ch√≠ ƒë√£ ch·ªçn
  const sortedRentals = [...filteredRentals].sort((a, b) => {
    if (sort === 'date-desc') {
      return new Date(b.pickupDate) - new Date(a.pickupDate);
    } else if (sort === 'date-asc') {
      return new Date(a.pickupDate) - new Date(b.pickupDate);
    } else if (sort === 'price-desc') {
      return b.totalAmount - a.totalAmount;
    } else if (sort === 'price-asc') {
      return a.totalAmount - b.totalAmount;
    }
    return 0;
  });
  
  if (loading) {
    return (
      <div className="history-container">
        <div className="loading-container">
          ƒêang t·∫£i l·ªãch s·ª≠ thu√™ xe...
        </div>
      </div>
    );
  }
  
  return (
    <div className="history-container">
      <h1>L·ªãch s·ª≠ thu√™ xe c·ªßa t√¥i</h1>
      
      {/* B·∫£ng ƒëi·ªÅu khi·ªÉn ph√¢n t√≠ch */}
      <div className="analytics-dashboard">
        <h2>Ph√¢n t√≠ch thu√™ xe c·ªßa b·∫°n</h2>
        
        <div className="analytics-grid">
          <div className="analytics-card">
            <div className="analytics-icon">üèçÔ∏è</div>
            <div className="analytics-content">
              <div className="analytics-value">{analytics.totalRentals}</div>
              <div className="analytics-label">T·ªïng l·∫ßn thu√™</div>
            </div>
          </div>
          
          <div className="analytics-card">
            <div className="analytics-icon">üí∞</div>
            <div className="analytics-content">
              <div className="analytics-value">${analytics.totalSpent}</div>
              <div className="analytics-label">T·ªïng chi ti√™u</div>
            </div>
          </div>
          
          <div className="analytics-card">
            <div className="analytics-icon">üõ£Ô∏è</div>
            <div className="analytics-content">
              <div className="analytics-value">{analytics.totalDistance} km</div>
              <div className="analytics-label">T·ªïng qu√£ng ƒë∆∞·ªùng</div>
            </div>
          </div>
          
          <div className="analytics-card">
            <div className="analytics-icon">üîã</div>
            <div className="analytics-content">
              <div className="analytics-value">{analytics.avgBatteryUsage.toFixed(1)}%</div>
              <div className="analytics-label">TB. s·ª≠ d·ª•ng pin</div>
            </div>
          </div>
          
          <div className="analytics-card">
            <div className="analytics-icon">‚ù§Ô∏è</div>
            <div className="analytics-content">
              <div className="analytics-value">{analytics.favoriteVehicle || 'Ch∆∞a c√≥'}</div>
              <div className="analytics-label">Xe y√™u th√≠ch</div>
            </div>
          </div>
          
          <div className="analytics-card">
            <div className="analytics-icon">üìç</div>
            <div className="analytics-content">
              <div className="analytics-value">{analytics.favoriteStation || 'Ch∆∞a c√≥'}</div>
              <div className="analytics-label">Tr·∫°m y√™u th√≠ch</div>
            </div>
          </div>
        </div>
      </div>
      
      {/* B·ªô l·ªçc v√† S·∫Øp x·∫øp */}
      <div className="history-controls">
        <div className="filter-group">
          <label>L·ªçc:</label>
          <select value={filter} onChange={(e) => setFilter(e.target.value)}>
            <option value="all">T·∫•t c·∫£ l·ªãch thu√™</option>
            <option value="active">ƒêang thu√™</option>
            <option value="completed">ƒê√£ ho√†n th√†nh</option>
          </select>
        </div>
        
        <div className="filter-group">
          <label>S·∫Øp x·∫øp theo:</label>
          <select value={sort} onChange={(e) => setSort(e.target.value)}>
            <option value="date-desc">Ng√†y (M·ªõi nh·∫•t tr∆∞·ªõc)</option>
            <option value="date-asc">Ng√†y (C≈© nh·∫•t tr∆∞·ªõc)</option>
            <option value="price-desc">Gi√° (Cao nh·∫•t tr∆∞·ªõc)</option>
            <option value="price-asc">Gi√° (Th·∫•p nh·∫•t tr∆∞·ªõc)</option>
          </select>
        </div>
      </div>
      
      {/* Danh s√°ch l·ªãch s·ª≠ thu√™ */}
      <div className="rental-history-list">
        {sortedRentals.length === 0 ? (
          <div className="empty-history">
            <p>Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ thu√™ n√†o v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.</p>
          </div>
        ) : (
          sortedRentals.map(rental => (
            <div key={rental.id} className={`rental-card ${rental.status}`}>
              <div className="rental-header">
                <div className="rental-id">ƒê·∫∑t xe #{rental.id}</div>
                <div className={`rental-status ${rental.status}`}>
                  {rental.status === 'completed' ? 'Ho√†n th√†nh' : 'ƒêang thu√™'}
                </div>
              </div>
              
              <div className="rental-body">
                <div className="rental-details">
                  <div className="rental-vehicle">
                    <h3>{rental.vehicleName}</h3>
                    <div className="vehicle-type">{rental.vehicleType}</div>
                  </div>
                  
                  <div className="rental-dates">
                    <div className="date-group">
                      <div className="date-label">Nh·∫≠n xe</div>
                      <div className="date-value">
                        {new Date(rental.pickupDate).toLocaleDateString('vi-VN')} l√∫c {rental.pickupTime}
                      </div>
                    </div>
                    
                    <div className="date-connector"></div>
                    
                    <div className="date-group">
                      <div className="date-label">Tr·∫£ xe</div>
                      <div className="date-value">
                        {new Date(rental.returnDate).toLocaleDateString('vi-VN')} l√∫c {rental.returnTime}
                      </div>
                    </div>
                  </div>
                  
                  <div className="rental-station">
                    <div className="station-label">ƒê·ªãa ƒëi·ªÉm</div>
                    <div className="station-value">{rental.stationName}</div>
                  </div>
                </div>
                
                <div className="rental-metrics">
                  <div className="metric">
                    <div className="metric-label">T·ªïng ti·ªÅn</div>
                    <div className="metric-value">${rental.totalAmount}</div>
                  </div>
                  
                  {rental.status === 'completed' && (
                    <>
                      <div className="metric">
                        <div className="metric-label">Qu√£ng ƒë∆∞·ªùng</div>
                        <div className="metric-value">{rental.distanceTraveled} km</div>
                      </div>
                      
                      <div className="metric">
                        <div className="metric-label">Pin ƒë√£ d√πng</div>
                        <div className="metric-value">{rental.avgBatteryUsage}%</div>
                      </div>
                    </>
                  )}
                </div>
              </div>
              
              <div className="rental-actions">
                {rental.status === 'active' ? (
                  <>
                    <Link to={`/bookings/${rental.id}`} className="btn btn-secondary">Xem chi ti·∫øt</Link>
                    <Link to={`/return/${rental.id}`} className="btn btn-primary">Tr·∫£ xe</Link>
                  </>
                ) : (
                  <>
                    <Link to={`/bookings/${rental.id}`} className="btn btn-secondary">Xem h√≥a ƒë∆°n</Link>
                    <Link to={`/book/${rental.vehicleType}`} className="btn btn-primary">Thu√™ t∆∞∆°ng t·ª±</Link>
                  </>
                )}
              </div>
            </div>
          ))
        )}
      </div>
      
      {/* Ph√¢n trang l·ªãch s·ª≠ ƒë·∫∑t xe */}
      <div className="pagination">
        <button className="pagination-button" disabled>{/* < */}Tr∆∞·ªõc</button>
        <div className="pagination-info">Trang 1 / 1</div>
        <button className="pagination-button" disabled>Sau{/* > */}</button>
      </div>
      
      {/* H√†nh ƒë·ªông b·ªï sung */}
      <div className="history-actions">
        <Link to="/vehicles" className="btn btn-primary">Thu√™ xe m·ªõi</Link>
      </div>
    </div>
  );
}