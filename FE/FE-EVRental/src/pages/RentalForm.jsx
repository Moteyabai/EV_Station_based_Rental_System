import React, { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import { useCart } from "../contexts/CartContext";
import "../styles/RentalForm.css";

export default function RentalForm() {
  const navigate = useNavigate();
  const { cartItems, getTotalPrice, clearCart } = useCart();

  // State cho th√¥ng tin ng∆∞·ªùi thu√™
  const [customerInfo, setCustomerInfo] = useState({
    fullName: "",
    email: "",
    phone: "",
    idCard: "",
    address: "",
    driverLicense: "",
  });

  // State cho th√¥ng tin thu√™ xe
  const [rentalDetails, setRentalDetails] = useState({
    pickupDate: new Date().toISOString().split("T")[0],
    returnDate: new Date(Date.now() + 86400000).toISOString().split("T")[0], // +1 ng√†y
    pickupTime: "09:00",
    returnTime: "18:00",
    days: 1,
  });

  // State cho c√°c l·ªói validate
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // X·ª≠ l√Ω khi kh√¥ng c√≥ xe trong gi·ªè h√†ng
  if (cartItems.length === 0) {
    return (
      <div className="rental-form-container">
        <div className="empty-cart-message">
          <h2>üõí Gi·ªè h√†ng tr·ªëng</h2>
          <p>B·∫°n ch∆∞a c√≥ xe n√†o trong gi·ªè h√†ng ƒë·ªÉ ti·∫øn h√†nh thu√™</p>
          <Link to="/vehicles" className="btn primary">
            Xem danh s√°ch xe
          </Link>
        </div>
      </div>
    );
  }

  // X·ª≠ l√Ω thay ƒë·ªïi form input th√¥ng tin kh√°ch h√†ng
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCustomerInfo({
      ...customerInfo,
      [name]: value,
    });

    // X√≥a th√¥ng b√°o l·ªói khi ng∆∞·ªùi d√πng nh·∫≠p l·∫°i
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: "",
      });
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi form input th√¥ng tin thu√™ xe
  const handleRentalChange = (e) => {
    const { name, value } = e.target;

    setRentalDetails((prev) => {
      const updated = {
        ...prev,
        [name]: value,
      };

      // T√≠nh s·ªë ng√†y thu√™ khi thay ƒë·ªïi ng√†y nh·∫≠n ho·∫∑c ng√†y tr·∫£
      if (name === "pickupDate" || name === "returnDate") {
        const pickupDate =
          name === "pickupDate" ? new Date(value) : new Date(prev.pickupDate);
        const returnDate =
          name === "returnDate" ? new Date(value) : new Date(prev.returnDate);

        // T√≠nh s·ªë ng√†y ch√™nh l·ªách
        const diffTime = Math.abs(returnDate - pickupDate);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        updated.days = diffDays || 1; // T·ªëi thi·ªÉu 1 ng√†y
      }

      return updated;
    });

    // X√≥a th√¥ng b√°o l·ªói khi ng∆∞·ªùi d√πng nh·∫≠p l·∫°i
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: "",
      });
    }
  };

  // X√°c th·ª±c form
  const validateForm = () => {
    const newErrors = {};

    // X√°c th·ª±c th√¥ng tin c√° nh√¢n
    if (!customerInfo.fullName.trim()) {
      newErrors.fullName = "Vui l√≤ng nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß";
    }

    if (!customerInfo.email.trim()) {
      newErrors.email = "Vui l√≤ng nh·∫≠p email";
    } else if (!/\S+@\S+\.\S+/.test(customerInfo.email)) {
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá";
    }

    if (!customerInfo.phone.trim()) {
      newErrors.phone = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i";
    } else if (!/^[0-9]{10,11}$/.test(customerInfo.phone.replace(/\s/g, ""))) {
      newErrors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá";
    }

    if (!customerInfo.idCard.trim()) {
      newErrors.idCard = "Vui l√≤ng nh·∫≠p s·ªë CMND/CCCD";
    } else if (!/^[0-9]{9,12}$/.test(customerInfo.idCard.replace(/\s/g, ""))) {
      newErrors.idCard = "S·ªë CMND/CCCD kh√¥ng h·ª£p l·ªá";
    }

    if (!customerInfo.address.trim()) {
      newErrors.address = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ";
    }

    if (!customerInfo.driverLicense.trim()) {
      newErrors.driverLicense = "Vui l√≤ng nh·∫≠p s·ªë b·∫±ng l√°i xe";
    }

    // X√°c th·ª±c th√¥ng tin thu√™ xe
    if (!rentalDetails.pickupDate) {
      newErrors.pickupDate = "Vui l√≤ng ch·ªçn ng√†y nh·∫≠n xe";
    }

    if (!rentalDetails.returnDate) {
      newErrors.returnDate = "Vui l√≤ng ch·ªçn ng√†y tr·∫£ xe";
    }

    if (
      new Date(rentalDetails.returnDate) <= new Date(rentalDetails.pickupDate)
    ) {
      newErrors.returnDate = "Ng√†y tr·∫£ xe ph·∫£i sau ng√†y nh·∫≠n xe";
    }

    if (!rentalDetails.pickupTime) {
      newErrors.pickupTime = "Vui l√≤ng ch·ªçn gi·ªù nh·∫≠n xe";
    }

    if (!rentalDetails.returnTime) {
      newErrors.returnTime = "Vui l√≤ng ch·ªçn gi·ªù tr·∫£ xe";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // X·ª≠ l√Ω submit form
  const handleSubmit = (e) => {
    e.preventDefault();

    // Validate form tr∆∞·ªõc khi submit
    if (validateForm()) {
      setIsSubmitting(true);

      // L∆∞u th√¥ng tin v√†o localStorage (trong app th·ª±c t·∫ø s·∫Ω g·ª≠i l√™n server)
      try {
        // C·∫≠p nh·∫≠t cartItems v·ªõi th√¥ng tin thu√™ m·ªõi
        const updatedCartItems = cartItems.map((item) => ({
          ...item,
          rentalDetails: {
            ...item.rentalDetails,
            ...rentalDetails,
          },
          // C·∫≠p nh·∫≠t t·ªïng gi√° d·ª±a tr√™n s·ªë ng√†y m·ªõi
          totalPrice: item.vehicle.price * rentalDetails.days,
        }));

        const rentalInfo = {
          customerInfo,
          rentalDetails,
          cartItems: updatedCartItems,
          totalPrice:
            getTotalPrice() *
            (rentalDetails.days / cartItems[0].rentalDetails.days),
          orderDate: new Date().toISOString(),
          status: "pending",
        };

        localStorage.setItem("rental_info", JSON.stringify(rentalInfo));

        // Chuy·ªÉn ƒë·∫øn trang x√°c nh·∫≠n sau 1 gi√¢y
        setTimeout(() => {
          navigate("/checkout");
        }, 1000);
      } catch (error) {
        console.error("Error saving rental information:", error);
        setIsSubmitting(false);
      }
    } else {
      // Scroll to first error
      const firstError = Object.keys(errors)[0];
      document.getElementsByName(firstError)[0]?.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  };

  // Format gi√° ti·ªÅn
  const formatPrice = (price) => {
    return new Intl.NumberFormat("vi-VN").format(price) + " ƒë";
  };

  return (
    <div className="rental-form-container">
      <h1>Th√¥ng tin thu√™ xe</h1>

      <div className="rental-form-content">
        <div className="rental-form-left">
          <h2>ƒêi·ªÅn th√¥ng tin thu√™ xe</h2>

          <form onSubmit={handleSubmit} className="rental-form">
            <h3 className="section-title">üìÜ Th√¥ng tin ng√†y gi·ªù thu√™</h3>

            <div className="rental-date-time">
              <div className="date-time-row">
                <div className="form-group">
                  <label htmlFor="pickupDate">Ng√†y nh·∫≠n xe *</label>
                  <input
                    type="date"
                    id="pickupDate"
                    name="pickupDate"
                    value={rentalDetails.pickupDate}
                    onChange={handleRentalChange}
                    min={new Date().toISOString().split("T")[0]}
                    className={errors.pickupDate ? "error" : ""}
                  />
                  {errors.pickupDate && (
                    <span className="error-message">{errors.pickupDate}</span>
                  )}
                </div>

                <div className="form-group">
                  <label htmlFor="pickupTime">Gi·ªù nh·∫≠n xe *</label>
                  <input
                    type="time"
                    id="pickupTime"
                    name="pickupTime"
                    value={rentalDetails.pickupTime}
                    onChange={handleRentalChange}
                    className={errors.pickupTime ? "error" : ""}
                  />
                  {errors.pickupTime && (
                    <span className="error-message">{errors.pickupTime}</span>
                  )}
                </div>
              </div>

              <div className="date-time-row">
                <div className="form-group">
                  <label htmlFor="returnDate">Ng√†y tr·∫£ xe *</label>
                  <input
                    type="date"
                    id="returnDate"
                    name="returnDate"
                    value={rentalDetails.returnDate}
                    onChange={handleRentalChange}
                    min={rentalDetails.pickupDate}
                    className={errors.returnDate ? "error" : ""}
                  />
                  {errors.returnDate && (
                    <span className="error-message">{errors.returnDate}</span>
                  )}
                </div>

                <div className="form-group">
                  <label htmlFor="returnTime">Gi·ªù tr·∫£ xe *</label>
                  <input
                    type="time"
                    id="returnTime"
                    name="returnTime"
                    value={rentalDetails.returnTime}
                    onChange={handleRentalChange}
                    className={errors.returnTime ? "error" : ""}
                  />
                  {errors.returnTime && (
                    <span className="error-message">{errors.returnTime}</span>
                  )}
                </div>
              </div>

              <div className="rental-duration">
                <div className="duration-tag">
                  <span>Th·ªùi gian thu√™: </span>
                  <strong>{rentalDetails.days} ng√†y</strong>
                </div>
              </div>
            </div>

            <h3 className="section-title">üë§ Th√¥ng tin c√° nh√¢n</h3>

            <div className="form-group">
              <label htmlFor="fullName">H·ªç v√† t√™n *</label>
              <input
                type="text"
                id="fullName"
                name="fullName"
                value={customerInfo.fullName}
                onChange={handleInputChange}
                className={errors.fullName ? "error" : ""}
              />
              {errors.fullName && (
                <span className="error-message">{errors.fullName}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="email">Email *</label>
              <input
                type="email"
                id="email"
                name="email"
                value={customerInfo.email}
                onChange={handleInputChange}
                className={errors.email ? "error" : ""}
              />
              {errors.email && (
                <span className="error-message">{errors.email}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i *</label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={customerInfo.phone}
                onChange={handleInputChange}
                className={errors.phone ? "error" : ""}
              />
              {errors.phone && (
                <span className="error-message">{errors.phone}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="idCard">S·ªë CMND/CCCD *</label>
              <input
                type="text"
                id="idCard"
                name="idCard"
                value={customerInfo.idCard}
                onChange={handleInputChange}
                className={errors.idCard ? "error" : ""}
              />
              {errors.idCard && (
                <span className="error-message">{errors.idCard}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="address">ƒê·ªãa ch·ªâ *</label>
              <textarea
                id="address"
                name="address"
                value={customerInfo.address}
                onChange={handleInputChange}
                className={errors.address ? "error" : ""}
                rows="3"
              ></textarea>
              {errors.address && (
                <span className="error-message">{errors.address}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="driverLicense">S·ªë gi·∫•y ph√©p l√°i xe *</label>
              <input
                type="text"
                id="driverLicense"
                name="driverLicense"
                value={customerInfo.driverLicense}
                onChange={handleInputChange}
                className={errors.driverLicense ? "error" : ""}
              />
              {errors.driverLicense && (
                <span className="error-message">{errors.driverLicense}</span>
              )}
            </div>

            <div className="rental-note">
              <p>
                <strong>L∆∞u √Ω:</strong> C√°c gi·∫•y t·ªù g·ªëc s·∫Ω c·∫ßn ƒë∆∞·ª£c xu·∫•t tr√¨nh
                khi nh·∫≠n xe
              </p>
            </div>

            <div className="form-actions">
              <Link to="/cart" className="btn secondary">
                Quay l·∫°i gi·ªè h√†ng
              </Link>
              <button
                type="submit"
                className="btn primary"
                disabled={isSubmitting}
              >
                {isSubmitting ? "ƒêang x·ª≠ l√Ω..." : "Ti·∫øp t·ª•c"}
              </button>
            </div>
          </form>
        </div>

        <div className="rental-form-right">
          <div className="order-summary">
            <h3>Th√¥ng tin ƒë·∫∑t h√†ng</h3>

            <div className="cart-summary">
              {cartItems.map((item) => (
                <div key={item.id} className="summary-item">
                  <div className="summary-item-image">
                    <img src={item.vehicle.image} alt={item.vehicle.name} />
                  </div>
                  <div className="summary-item-info">
                    <h4>{item.vehicle.name}</h4>
                    <p>Th·ªùi gian thu√™: {item.rentalDetails.days} ng√†y</p>
                    <p>
                      Gi√°: {item.vehicle.price}
                      {item.vehicle.priceUnit}
                    </p>
                  </div>
                  <div className="summary-item-price">
                    {formatPrice(item.totalPrice * 1000)}
                  </div>
                </div>
              ))}
            </div>

            <div className="total-summary">
              <div className="summary-row total">
                <span>T·ªïng ti·ªÅn thu√™ ({rentalDetails.days} ng√†y):</span>
                <span>
                  {formatPrice(getTotalPrice() * rentalDetails.days * 1000)}
                </span>
              </div>
            </div>
          </div>

          <div className="rental-requirements">
            <h3>ƒêi·ªÅu ki·ªán thu√™ xe</h3>
            <ul>
              <li>Tu·ªïi t·ª´ 18 tu·ªïi tr·ªü l√™n</li>
              <li>C√≥ gi·∫•y ph√©p l√°i xe h·ª£p l·ªá</li>
              <li>CMND/CCCD c√≤n hi·ªáu l·ª±c</li>
              <li>ƒê·∫∑t c·ªçc 30% gi√° tr·ªã xe</li>
              <li>Ho√†n tr·∫£ xe ƒë√∫ng h·∫°n v√† trong t√¨nh tr·∫°ng t·ªët</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
